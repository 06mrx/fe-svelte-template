<script lang="ts">
	import '../../../app.css';
    import { goto } from '$app/navigation';
    import { browser } from '$app/environment';
    import { onMount } from 'svelte';
    import { page } from '$app/stores';

    // State untuk menyimpan data formulir dan status
    let email = '';
    let password = '';
    let loading = false;
    let errorMessage = '';
    let loginResponse = '';

    export let data;

    // Fungsi untuk menangani pengiriman formulir
    async function handleLogin() {
        errorMessage = '';
        loading = true;
        loginResponse = '';

        try {
            const response = await fetch(`${data.apiUrl}/api/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Referer: window.location.origin
                },
                body: JSON.stringify({ email, password })
            });

            const result = await response.json();

            if (response.ok) {
                // Login berhasil, simpan data ke local storage
                if (browser) {
                    localStorage.setItem('user_data', JSON.stringify(result.data.user));
                    localStorage.setItem('user_token', result.data.token);
                    // localStorage.setItem('user_role', result.data.role)
                    // Logika redirect yang diperbarui
                    const returnUrl = $page.url.searchParams.get('returnUrl');
                    if (returnUrl) {
                        goto(returnUrl);
                    } else {
                        // Redirect berdasarkan peran jika tidak ada returnUrl
                        if (result.data.role === 'admin') {
                            goto('/app/admin');
                        } else if (result.data.role === 'user') {
                            goto('/app/user');
                        } else {
                            goto('/');
                        }
                    }
                }
            } else {
                // Login gagal, tampilkan pesan error
                errorMessage = result.message || 'Login gagal, coba lagi.';
            }
        } catch (error) {
            errorMessage = 'Terjadi kesalahan jaringan.';
            console.error('Login error:', error);
        } finally {
            loading = false;
        }
    }
    
    // Mengecek jika pengguna sudah login saat komponen dipasang
    onMount(async () => {
        if (browser && localStorage.getItem('user_token')) {
            try {
                const response = await fetch(`${data.apiUrl}/api/profile`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Referer': window.location.origin,
                        'Authorization': `Bearer ${localStorage.getItem("user_token")}` // Format header yang benar
                    }
                });
                
                const result = await response.json();

                if (response.ok) {
                    const role = result.data?.Roles[0]?.Name;
                    const returnUrl = $page.url.searchParams.get('returnUrl');
                    
                    if (returnUrl) {
                       goto(returnUrl);
                    } else if (role === "admin") {
                        goto('/app/admin');
                    } else if (role === 'user') {
                       goto('/app/user');
                    } else {
                        goto('/')
                    }
                } else {
                    localStorage.removeItem("user_token");
                    localStorage.removeItem("user_data");
                }
            } catch (error) {
                console.error('Error checking user status:', error);
                // Biarkan pengguna tetap di halaman ini jika ada error jaringan
            }
        }
    });
</script>

<div class="flex min-h-screen items-center justify-center bg-gray-100">
    <div class="w-full max-w-md space-y-6 rounded-lg bg-white p-8 shadow-md">
        <h2 class="text-center text-3xl font-extrabold text-gray-900">Masuk ke Akun Anda</h2>

        {#if errorMessage}
            <div
                class="relative rounded border border-red-400 bg-red-100 px-4 py-3 text-red-700"
                role="alert"
            >
                <strong class="font-bold">Error!</strong>
                <span class="block sm:inline">{errorMessage}</span>
            </div>
        {/if}

        {#if loginResponse}
            <div
                class="relative rounded border border-green-400 bg-green-100 px-4 py-3 text-green-700"
                role="alert"
            >
                <strong class="font-bold">Response!</strong>
                <span class="block sm:inline">{loginResponse}</span>
            </div>
        {/if}

        <form on:submit|preventDefault={handleLogin} class="space-y-4">
            <div>
                <label for="email" class="block text-sm font-medium text-gray-700">Alamat Email</label>
                <input
                    id="email"
                    name="email"
                    type="email"
                    autocomplete="email"
                    required
                    class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                    bind:value={email}
                />
            </div>
            <div>
                <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                <input
                    id="password"
                    name="password"
                    type="password"
                    autocomplete="current-password"
                    required
                    class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                    bind:value={password}
                />
            </div>
            <div>
                <button
                    type="submit"
                    class="flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 {loading
                        ? 'cursor-not-allowed opacity-50'
                        : ''}"
                    disabled={loading}
                >
                    {#if loading}
                        <svg
                            class="-ml-1 mr-3 h-5 w-5 animate-spin text-white"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                        >
                            <circle
                                class="opacity-25"
                                cx="12"
                                cy="12"
                                r="10"
                                stroke="currentColor"
                                stroke-width="4"
                            ></circle>
                            <path
                                class="opacity-75"
                                fill="currentColor"
                                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                            ></path>
                        </svg>
                        Memproses...
                    {:else}
                        Masuk
                    {/if}
                </button>
            </div>
        </form>
    </div>
</div>
