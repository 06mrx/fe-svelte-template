<script>
	import { storageService } from '$lib/storageService';
	import { onMount } from 'svelte';
	import { goto } from '$app/navigation';
	import { page } from '$app/stores'; // Import $page store
  import toast, { Toaster } from 'svelte-french-toast';

	import DeleteConfirmationModal from '../../../../components/modal/DeleteConfirmationModal.svelte';

	/** @type {import('./$types').PageData} */
	let { data } = $props();
  const token = storageService.getToken();
	let users = $state([]); 
	let loading = $state(true);
	let error = $state('');

	//modal state
	let isDeleteModalOpen = $state(false);
	let itemToDeleteId = $state('');
	let itemToDeleteName = $state('');

	let searchTerm = $state(''); // State for search input (user typing)
	let itemsPerPage = $state(10); // State for items per page from select

	let pagination = $state({
		current_page: 1,
		last_page: 1,
		per_page: itemsPerPage, // Akan disinkronkan dari URL atau disetel ke 10
		total: 0
	});

	let debounceTimeoutId; // Untuk menyimpan ID timeout dari debounce pencarian
	let timeout;
	function handle_search() {
		// searching = true;
		if (timeout) clearTimeout(timeout);
		timeout = setTimeout(() => {
			updateUrlParams(searchTerm, itemsPerPage, 1, true);
			fetchUsersFromUrlParams();
		}, 500);
	}
	// --- Fungsi Utama: Mengambil Data dari API ---
	// Fungsi ini membaca parameter dari URL dan melakukan panggilan API.
	// Ini adalah satu-satunya tempat di mana panggilan API `fetch` terjadi.
	async function fetchUsersFromUrlParams() {
		setTimeout(async () => {
			loading = true;
			error = '';

			
			if (!token) {
				error = 'Anda tidak terautentikasi. Silakan login.';
				goto('/login');
				loading = false;
				return;
			}

			// Ambil parameter langsung dari URL
			const urlParams = $page.url.searchParams;
			const currentPage = parseInt(urlParams.get('page') || '1');
			const currentSearchTerm = urlParams.get('search') || '';
			const currentItemsPerPage = parseInt(urlParams.get('per_page') || '10');

			try {
				let apiUrl = `${data.PUBLIC_API_URL}/api/users?page=${currentPage}&per_page=${currentItemsPerPage}`;
				if (currentSearchTerm) {
					apiUrl += `&search=${currentSearchTerm}`;
				}

				const response = await fetch(apiUrl, {
					method: 'GET',
					headers: {
						'Content-Type': 'application/json',
						Authorization: `Bearer ${token}`
					}
				});

				const result = await response.json();

				if (response.ok) {
					users = result.data.data;
					pagination = {
						current_page: result.data.current_page,
						last_page: result.data.last_page,
						per_page: result.data.per_page,
						total: result.data.total
					};
          toast.success(result.message);
				} else {
					error = result.message || 'Gagal mengambil data pengguna.';
          toast.error(result.message);
					if (response.status === 401) {
						storageService.clearUserData();
						goto('/auth/login');
					}
				}
			} catch (err) {
				console.error('Fetch users error:', err);
				error = 'Terjadi kesalahan jaringan atau server.';
			} finally {
				loading = false;
			}
		}, 100);
	}

	// --- Fungsi Utama: Memperbarui URL (dan memicu fetch) ---
	// Fungsi ini adalah satu-satunya cara filter/paginasi berubah di URL.
	function updateUrlParams(newSearchTerm, newItemsPerPage, newPage, resetPage = false) {
		const url = new URL(window.location.href);
		// Set `per_page`
		url.searchParams.set('per_page', newItemsPerPage.toString());

		// Tentukan halaman target
		const targetPage = resetPage ? 1 : newPage;
		url.searchParams.set('page', targetPage.toString());

		// Set `search`
		if (newSearchTerm) {
			url.searchParams.set('search', newSearchTerm);
		} else {
			url.searchParams.delete('search');
		}

		const newUrlString = url.toString();
		if (newUrlString !== window.location.href) {
			// Hanya navigasi jika URL berubah
			goto(newUrlString, { replaceState: true, noScroll: true });
		}
		// Jika URL tidak berubah, tidak perlu goto. $effect di bawah akan menangani sinkronisasi dan fetch.
	}

	// --- Event Handlers untuk Interaksi UI ---
	function handleSearchInput() {
		clearTimeout(debounceTimeoutId); // Bersihkan timeout sebelumnya
		// debounceTimeoutId = setTimeout(() => {
		// 	// Ketika debounce selesai, panggil updateUrlParams dengan search term baru
		// 	// dan reset halaman ke 1.
		// 	//   updateUrlParams(searchTerm, itemsPerPage, 1, true);
		// 	console.log(444);
		// }, 2000); // Debounce 2 detik
		debounceTimeoutId = setTimeout(meh, 2000);
	}

	function handleItemsPerPageChange(newItemsPerPage) {
		// Ketika itemsPerPage berubah, update URL dan reset halaman ke 1.
		updateUrlParams(searchTerm, newItemsPerPage, 1, true);
	}

	function goToPage(pageNumber) {
		// Ketika paginasi berubah, update URL tanpa mereset filter.
		updateUrlParams(searchTerm, itemsPerPage, pageNumber, false);
	}
	function prevPage() {
		goToPage(pagination.current_page - 1);
	}

	function nextPage() {
		goToPage(pagination.current_page + 1);
	}
	function resetFilters() {
		searchTerm = ''; // Reset state input
		itemsPerPage = 10; // Reset state per_page
		clearTimeout(debounceTimeoutId); // Bersihkan debounce yang tertunda
		updateUrlParams('', 10, 1, true); // Update URL untuk mereset semua filter
		fetchUsersFromUrlParams();
	}

  const openDeleteModal = (id, name) => {
    itemToDeleteId = id;
    itemToDeleteName = name;
    isDeleteModalOpen = true;

  }

  const closeDeleteModal = () => {
    isDeleteModalOpen = false;
    itemToDeleteId = '';
    itemToDeleteName = '';
  }

  // Fungsi yang akan dieksekusi ketika konfirmasi penghapusan dilakukan
  async function handleConfirmDelete() {
    console.log(`Menghapus item dengan ID: ${itemToDeleteId}, Nama: ${itemToDeleteName}`);
    // Di sini Anda akan melakukan panggilan API DELETE yang sebenarnya
    try {
      // Contoh panggilan API DELETE (ganti dengan endpoint API Anda)
      const response = await fetch(`${data.PUBLIC_API_URL}/api/users/${itemToDeleteId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}` // Jika memerlukan otorisasi
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Gagal menghapus item.');
      }

      console.log('Item berhasil dihapus!');
      fetchUsersFromUrlParams()
      // Setelah berhasil, Anda mungkin ingin:
      // 1. Memuat ulang daftar item (misalnya panggil fungsi fetchUsers())
      // 2. Menghapus item dari array `users` secara lokal untuk update UI instan
      // (ini akan memicu reaktivitas Svelte)
      // users = users.filter(user => user.id !== itemIdToDelete);
      
      closeDeleteModal(); // Tutup modal setelah berhasil
      // alert('Pengguna berhasil dihapus!'); // Hanya untuk demo, gunakan notifikasi yang lebih baik
    } catch (error) {
      console.error('Error saat menghapus:', error);
      // Anda bisa menampilkan error di halaman utama atau di dalam modal jika modal memiliki state error sendiri
      alert(`Terjadi kesalahan: ${error.message}`); // Hanya untuk demo
      // Jangan tutup modal jika ada error, agar pengguna bisa melihat pesan error.
    }
  }


	// --- Inisialisasi dan Sinkronisasi State/URL ---

	// onMount: Inisialisasi state komponen dari URL saat ini dan lakukan fetch awal.
	onMount(() => {
		const urlParams = $page.url.searchParams;
		searchTerm = urlParams.get('search') || '';
		itemsPerPage = parseInt(urlParams.get('per_page') || '10');
		pagination.current_page = parseInt(urlParams.get('page') || '1');
		pagination.per_page = itemsPerPage; // Pastikan pagination.per_page juga sesuai

		// Lakukan fetch awal berdasarkan parameter URL yang ada saat ini.
		fetchUsersFromUrlParams();
	});

	// $effect: Ini adalah "otak" reaktivitas utama.
	// Ia bereaksi setiap kali `$page.url.searchParams` berubah (baik karena `goto()` kita atau navigasi eksternal).
	// Ia akan menyinkronkan state lokal komponen ke URL dan memicu pengambilan data.
	$effect(() => {
		// Guard: Abaikan eksekusi jika komponen sedang dalam proses loading data.
		// Ini mencegah $effect terpicu kembali secara tidak perlu oleh perubahan `loading`
		// atau jika `fetchUsersFromUrlParams` baru saja dipanggil dan `loading` masih true.
		if (loading) return;

		// Ambil parameter dari URL saat ini.
		const urlParams = $page.url.searchParams;
		const urlSearch = urlParams.get('search') || '';
		const urlPerPage = parseInt(urlParams.get('per_page') || '10');
		const urlPage = parseInt(urlParams.get('page') || '1');

		// Cek apakah state lokal komponen kita berbeda dari state di URL.
		// Jika berbeda, berarti ada perubahan URL yang perlu kita tanggapi.
		if (
			// searchTerm !== urlSearch ||
			itemsPerPage !== urlPerPage ||
			pagination.current_page !== urlPage
		) {
			// Sinkronkan state lokal komponen agar sesuai dengan URL.
			// searchTerm = urlSearch;
			itemsPerPage = urlPerPage;
			pagination.current_page = urlPage;
			pagination.per_page = urlPerPage; // Jaga konsistensi pagination.per_page

			// Picu pengambilan data berdasarkan state URL yang baru.
			fetchUsersFromUrlParams();
			// meh();
		}
	});

	// --- Placeholder untuk Fungsi CRUD Lainnya ---
	function createUser() {
		goto('/app/admin/users/create');
	}

	function editUser(userId) {
		goto(`/app/admin/users/${userId}/edit`);
	}

	function deleteUser(userId) {
		console.log(`Menunggu implementasi hapus pengguna: ${userId}`);
		// Implementasi logika hapus di sini
	}
</script>
<Toaster />

<div class="container mx-auto p-3 md:p-5">
	<div
		class="mb-6  flex flex-col justify-between space-y-4 sm:flex-row sm:items-center sm:space-y-0"
	>
		<h2 class="text-3xl font-bold text-gray-800">Daftar Pengguna</h2>
		<div
			class="flex w-full flex-wrap md:flex-nowrap  items-center  sm:w-auto flex-row space-x-2 md:space-x-4 space-y-0"
		>
			<input
				type="text"
				placeholder="Cari pengguna..."
				bind:value={searchTerm}
				on:input={handle_search}
				class="min-w-0 flex-1 rounded-md border border-gray-300 px-4 py-2 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
			/>
			<select
				on:change={(event) => handleItemsPerPageChange(event.target.value)}
				class="rounded-md hidden md:block border border-gray-300 px-4 py-2 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
			>
				{#each [5, 10, 20, 50] as option}
					<option value={option}>{option} per halaman</option>
				{/each}
			</select>
			<button
				on:click={resetFilters}
				class="rounded-md w-1/3 md:flex-1 bg-gray-200 px-4 py-2 text-gray-700 shadow-sm transition-colors duration-200 hover:bg-gray-300"
			>
				Reset Filter
			</button>
			<button
				on:click={createUser}
				class="rounded-lg border border-indigo-600 p-2 text-indigo-500 shadow-md transition-colors duration-200 hover:bg-indigo-700 hover:text-white"
			>
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24"
					><path fill="currentColor" d="M11 13H5v-2h6V5h2v6h6v2h-6v6h-2z" /></svg
				>
			</button>
		</div>
	</div>

	{#if loading}
		<div class="flex h-48 items-center justify-center">
			<div
				class="h-12 w-12 animate-spin rounded-full border-4 border-indigo-500 border-t-transparent"
			></div>
			<p class="ml-4 text-gray-700">Memuat pengguna...</p>
		</div>
	{:else if error}
		<div
			class="relative rounded border border-red-400 bg-red-100 px-4 py-3 text-red-700"
			role="alert"
		>
			<strong class="font-bold">Error!</strong>
			<span class="block sm:inline">{error}</span>
		</div>
	{:else if users.length === 0}
		<div
			class="relative rounded border border-yellow-400 bg-yellow-100 px-4 py-3 text-yellow-700"
			role="alert"
		>
			<strong class="font-bold">Informasi!</strong>
			<span class="block sm:inline">Tidak ada data pengguna yang ditemukan.</span>
		</div>
	{:else}
		<div class="overflow-hidden rounded-lg bg-white shadow-lg">
			<div class="overflow-x-auto min-w-20">
				<table class="min-w-full divide-y divide-gray-200">
					<thead class="bg-gray-50">
						<tr>
							<th
								scope="col"
								class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"
								>ID</th
							>
							<th
								scope="col"
								class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"
								>Nama</th
							>
							<th
								scope="col"
								class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"
								>Email</th
							>
							<th
								scope="col"
								class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"
								>Dibuat Pada</th
							>
							<th
								scope="col"
								class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"
								>Diperbarui Pada</th
							>
							<th
								scope="col"
								class="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500"
								>Aksi</th
							>
						</tr>
					</thead>
					<tbody class="divide-y divide-gray-200 bg-white">
						{#each users as user (user.id)}
							<tr>
								<td class="whitespace-nowrap px-6 py-4 text-sm text-gray-900"
									>{user.id.substring(0, 8)}...</td
								>
								<td class="whitespace-nowrap px-6 py-4 text-sm text-gray-900">{user.Name || '-'}</td
								>
								<td class="whitespace-nowrap px-6 py-4 text-sm text-gray-900"
									>{user.Email || '-'}</td
								>
								<td class="whitespace-nowrap px-6 py-4 text-sm text-gray-500">
									{new Date(user.CreatedAt).toLocaleDateString('id-ID', {
										year: 'numeric',
										month: 'short',
										day: 'numeric',
										hour: '2-digit',
										minute: '2-digit'
									})}
								</td>
								<td class="whitespace-nowrap px-6 py-4 text-sm text-gray-500">
									{new Date(user.UpdatedAt).toLocaleDateString('id-ID', {
										year: 'numeric',
										month: 'short',
										day: 'numeric',
										hour: '2-digit',
										minute: '2-digit'
									})}
								</td>
								<td class="whitespace-nowrap px-6 py-4 text-right text-sm font-medium">
									<button
										on:click={() => editUser(user.id)}
										class="mr-3 text-indigo-600 hover:text-indigo-900"
									>
										Edit
									</button>
									<button
										on:click={() => 
                    openDeleteModal(user.id, user.Name)}
										class="text-red-600 hover:text-red-900"
									>
										Hapus
									</button>
									
								</td>
							</tr>
						{/each}
					</tbody>
				</table>
			</div>

			<!-- Pagination Controls -->
			<nav
				class="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6"
				aria-label="Pagination"
			>
				<div class="hidden sm:block">
					<p class="text-sm text-gray-700">
						Menampilkan
						<span class="font-medium"
							>{(pagination.current_page - 1) * pagination.per_page + 1}</span
						>
						sampai
						<span class="font-medium"
							>{Math.min(pagination.current_page * pagination.per_page, pagination.total)}</span
						>
						dari
						<span class="font-medium">{pagination.total}</span>
						hasil
					</p>
				</div>
				<div class="flex flex-1 justify-between sm:justify-end">
					<button
						on:click={prevPage}
						disabled={pagination.current_page === 1}
						class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 {pagination.current_page ===
						1
							? 'cursor-not-allowed opacity-50'
							: ''}"
					>
						Sebelumnya
					</button>
					<button
						on:click={nextPage}
						disabled={pagination.current_page === pagination.last_page}
						class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 {pagination.current_page ===
						pagination.last_page
							? 'cursor-not-allowed opacity-50'
							: ''}"
					>
						Berikutnya
					</button>
				</div>
			</nav>
		</div>
	{/if}
</div>
<DeleteConfirmationModal
    isOpen={isDeleteModalOpen}
    onClose={closeDeleteModal}
    onConfirm={handleConfirmDelete}
    itemId={itemToDeleteId}
    itemName={itemToDeleteName}
    deleteUrl={`${data.PUBLIC_API_URL}/api/users/${itemToDeleteId}`}
  />
